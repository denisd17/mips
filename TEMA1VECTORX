#DE FACUT CAZ SPECIAL PENTRU P = 2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.data
	x: .space 200		#vector in care vom stoca valori dupa urmatoarea regula: index pozitie = element grup aditiv, x[index_pozitie] = element grup multiplicativ
	y: .space 200		#vector in care vom stoca valori dupa urmatoarea regula: index pozitie = element grup multiplicativ + 1, y[index_pozitie] = element grup aditiv
	msj: .space 100		#sir de caractere in care vom stoca mesajul ce trebuie criptat
	msjcr: .space 100	#sir de caractere in care vom stoca mesajul ce trebuie decriptat
	ch: .space 1		#in momentul parcurgerii sirurilor, vom stoca pe rand fiecare caracter in acest byte
	caz1: .asciiz "Numarul p introdus nu este numar prim!"
	generatorgasit: .asciiz "Cel mai mic generator este: "
	generatornegasit: .asciiz "Nu exista generatori!"
	criptat: .asciiz "Mesajul criptat este: "
	decriptat: .asciiz "Mesajul decriptat este: "
	new: .byte 10		#caracterul newline
	
.text
main:
	li $v0, 5		#incarcam registrul v0 cu codul de apel sistem 5, pentru a citi numarul p
	syscall
	
	move $t0, $v0		#copiem valoarea numarului p din registrul v0 in registrul temporar t0
	
	
	blt $t0, 2, nonprim	#verificam ca numarul p sa fie cel putin egal cu doi, in caz contrar acesta nu este prim
	
	beq $t0, 2, cazspecial 	#in cazul in care numarul este fix 2, sarim peste algoritmul de determinare al generatorului intrucat acesta poate fi doar 1
	
	move $t1, $t0		#copiem valoarea numarului p din registrul t0 in registrul t1
	div $t1, $t1, 2		
	addi $t1, $t1, 1	#acum registrul t1 va stoca valoarea (p/2) + 1, vom cauta divizori in intervalul [2,p/2]
	li $t2, 2		#vom folosi registrul t2 pentru a stoca in acesta valorile potentialilor divizori ai lui p
	
loop:
	beq $t2, $t1, prim	#daca nu gasim divizorii printre numerele naturale din intervalul [2,p/2] inseamna ca numarul este prim
	
	rem $t3, $t0, $t2	#stocam in registrul t3 valoarea restului impartirii lui p la potentialul divizor 
	
	beq $t3, 0, nonprim	#in cazul in care restul impartirii este 0, deci p se imparte exact, am gasit un divizor deci p nu e prim
	
	addi $t2, $t2, 1	#in caz contrar, trecem la numarul urmator pentru care vom face verificarea
	
	j loop			#sare la inceputul lui loop:
	

nonprim:
	li $v0, 4		#incarcam registrul v0 cu codul de apel sistem 4, pentru a afisa un mesaj pe ecran
	la $a0, caz1		#incarcam registrul a0 cu adresa sirului de caractere ce urmeaza a fi afisat
	syscall
	
	j exit			#sare la exit, care va opri rularea programului
	
prim:
	li $t1, 1
	sw $t1, x($zero)	#prima valoare din vectorul x va fi intotdeauna 0, intrucat orice numar ridicat la puterea 0 da 1
	li $t1, 2		#in t1 vom stoca posibilele valori ale generatorului g, evident incepem verificarea de la 2
loop_generator:
	beq $t1, $t0, nongenerator	#vom cauta valorile generatorului g in intervalul [2,p-1]
	li $t2, 1			#in t2 vom stoca ordinul elementului g
	move $t3, $t1			#folosit pentru operatiile de ridicare la putere
	li $t4, 8			#t4 retine adresele la care vom stoca puterile lui g in vectorul x, incepem cu 8 deoarece mereu x[0] = 1 si x[1] = g
loop_puteri:
	beq $t3, 1, loop_generatorc	#in cazul in care g ridicat la o putere este egal cu 1, in continuare doar se va repeta secventa de valori generate
	
	mul $t3, $t3, $t1		#ridicam numarul g la urmatoarea putere
	rem $t3, $t3, $t0		#aplicam mod p
	
															
	sw $t3, x($t4)			#incarcam pe pozitia x a vectorului valoarea lui g ridicat la puterea x
	
	addi $t4, $t4, 4		#trecem la urmatoarea adresa din vector
	addi $t2, $t2, 1		#am determinat ca ordinul elementului este cel putin cu 1 mai mare decat valoarea anterioara
	
	j loop_puteri			#sare la loop_puteri
loop_generatorc:
	addi $t2, $t2, 1		#adaugam 1 la ord(g) pentru a compara ord(g) + 1 cu ord(grup) + 1.Ord(grup) este egal cu p-1, dar dorim evitarea modificarii valorii stocate in registrul t0
	beq $t2, $t0, generator		#in cazul in care ord(g) = ord(grup), am gasit generatorul
	addi $t1, $t1, 1
	j loop_generator
	
generator:
	li $v0, 4			#afisare mesaj in cazul in care gasim generatorul
	la $a0, generatorgasit
	syscall
	
	li $v0, 1			#afisare generator
	move $a0, $t1
	syscall
	
	li $v0, 11			#trecerea pe urmatoarea linie dupa afisarea mesajului
	lb $a0, new
	syscall
	
	li $t2, 4
	sw $t1, x($t2)			#al doilea element al vectorului x va fi intotdeauna g, g la puterea 1 = g
	
	addi $t0, $t0, -1		#in loc de p vom retine valoarea p-1 in registrul t0, deoarece il vom folosi pe acesta in parcurgerea vectorilor x si y care au p-1 elemente
	li $t1, 0			#folosit ca si contor in for
	li $t2, 0			#folosit pentru a retine adresele la care vom stoca valori
	
yfill:					#urmeaza sa umplem vectorul y cu valori, conform regulii stabilite
	beq $t1, $t0, continuare	#t0 = p-1 care reprezinta numarul de elemente ale vectorilor x si y
	
	lw $t3, x($t2)			#incarcam in t3 valoarea de la adresa t2 din vectorul x
	addi $t3, $t3, -1		#scadem 1 din valoarea obtinuta intrucat pozitia t3 va corespunde elementului y = t3+1,insa dorim sa le stocam pe acestea incepand cu pozitia 0 din vector
        mul $t3, $t3, 4			#inmultim cu 4 pentru a obtine o adresa in care sa putem stoca valoarea
	sw $t1, y($t3)			#stocam la adresa t3 din vectorul y valoarea lui x pentru care il obtinem pe t3/4 + 1
	addi $t1, $t1, 1		#se aduna 1, contor in for
	addi $t2, $t2, 4		#se aduna 4, folosit pentru accesarea elementelor din vectorul x
	
	j yfill

cazspecial:
	li $t0, 1			#t0 retine valoarea generatorului
					#in cazul in care p este egal cu 2, singurul posibil generator este 1
					#este singurul caz in care 1 este generatorul unui grup multiplicativ
					#astfel ca pentru a evita verificarea inutila a numarului 1 in toate celelalte cazuri
					#am preferat sa fac o sectiune separata, pentru cazul in care p este egal cu 2
	
	li $v0, 4			#afisare mesaj in cazul in care gasim generatorul
	la $a0, generatorgasit
	syscall
	
	li $v0, 1			#afisare generator
	move $a0, $t1
	syscall
	
	li $v0, 11			#trecerea pe urmatoarea linie dupa afisarea mesajului
	lb $a0, new
	syscall
	
	sw $t0, x($zero)		#x la puterea 0 da intotdeauna 1
	sw $zero, y($zero)		#y = 1 este obtinut prin ridicarea lui g la puterea 0
		
continuare:
	
	li $v0, 8			#incarcam registrul v0 cu codul de apel sistem 8 pentru a citi primul mesaj
	la $a0, msj			#adresa din memorie a stringului
	li $a1, 100			#spatiu alocat stringului
	syscall				#efectuam citirea mesajului ce urmeaza a fi criptat
	
	li $v0, 8			#incarcam registrul v0 cu codul de apel sistem 8 pentru a citi primul mesaj
	la $a0, msjcr			#adresa din memorie a stringului
	li $a1, 100			#spatiu alocat stringului
	syscall				#efectuam citirea mesajului ce urmeaza a fi decriptat
	
criptare:
	li $v0, 4			#afisarea mesaj
	la $a0, criptat
	syscall

	li $t1, 0			#folosit pentru a parcurge stringul caracter cu caracter, creste din 1 in 1
	lb $a0, msj($t1)
	li $t2, 10			#codul ascii al caracterului '\n' ce este adaugat automat la finalul oricarui sir de caractere citit
	
loop_criptare:
	beq $a0, $t2, decriptare	#in cazul in care am ajuns la caracterul '\n' am ajuns la finalul stringului
	
	
	addi $a0, $a0, -65		#Efectuam aceasta scadere pentru a obtine pozitia in alfabet a caracterului, unde 65 este codul ascii al caracterului 'A'
	mul $a0, $a0, 4			#Inmultim cu 4 pentru a accesa vectorul x 
	lw $a0, x($a0)			#incarcam in a0 valoarea din grupul multiplicativ ce corespunde valorii din grupul aditiv
	
	
	addi $a0, $a0, 65		#Adaugam 65 la loc pentru a obtine codul ascii al caracterului
	li $v0, 11			#cod apel sistem 11 pentru printare de caracter
	syscall
	
	addi $t1, $t1, 1		#trecem la urmatorul byte din string
	lb $a0, msj($t1)		#pe acesta il incarcam in a0
	
	j loop_criptare
	
decriptare:
	li $v0, 11			#trecerea pe urmatoarea linie dupa afisarea mesajului criptat
	lb $a0, new
	syscall

	li $v0, 4			#afisarea mesaj
	la $a0, decriptat
	syscall

	li $t1, 0			#folosit pentru a parcurge stringul caracter cu caracter, creste din 1 in 1
	lb $a0, msjcr($t1)
	li $t2, 10
	
loop_decriptare:
	beq $a0, $t2, exit
	
	addi $a0, $a0, -65		#Efectuam aceasta scadere pentru a obtine pozitia in alfabet a caracterului, unde 65 este codul ascii al caracterului 'A'
	addi $a0, $a0, -1
	mul $a0, $a0, 4			#Inmultim cu 4 pentru a accesa vectorul x 
	lw $a0, y($a0)			#incarcam in a0 valoarea din grupul multiplicativ ce corespunde valorii din grupul aditiv
	
	
	addi $a0, $a0, 65		#Adaugam 65 la loc pentru a obtine codul ascii al caracterului
	li $v0, 11			#cod apel sistem 11 pentru printare de caracter
	syscall
	
	addi $t1, $t1, 1		#trecem la urmatorul byte din string
	lb $a0, msjcr($t1)		#pe acesta il incarcam in a0
	
	j loop_decriptare
	
exit:
	li $v0, 10
	syscall
	
nongenerator:
	li $v0, 4			
	la $a0, generatornegasit
	syscall
	
	j exit

	
